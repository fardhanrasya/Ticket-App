AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC with private subnets and VPC Endpoints.

Parameters:
  YourName:
    Type: String
  MasterUser:
    Type: String
  MasterPass:
    Type: String
  JwtSecretKey:
    Type: String

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub LKS-${YourName}-prod

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub LKS-${YourName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub LKS-${YourName}-private-subnet-2

  VPCEndpointSecretsManager:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCSecurityGroup

  VPCEndpointDynamoDB:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCSecurityGroup

  VPCEndpointSQS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      VpcId: !Ref MyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sqs
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCSecurityGroup

  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow internal traffic within VPC
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub LKS-${YourName}-sg
  
  StarrySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub Starry-Credentials-${YourName}
      Description: "Secret containing database credentials and JWT secret."
      SecretString: !Sub |
        {
          "MasterUsername": "${MasterUser}",
          "MasterUserPassword": "${MasterPass}",
          "JwtSecret": "${JwtSecretKey}"
        }
      Tags:
        - Key: "Name"
          Value: !Sub Starry-Credentials-${YourName}

Outputs:
  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref VPCSecurityGroup
    Export:
      Name: SecurityGroupId
  VPCId:
    Description: VPC ID
    Value: !Ref MyVPC
    Export:
      Name: VPCId
  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1Id
  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2Id
  SecretArn:
    Description: ARN of the Secret Manager storing DocumentDB credentials
    Value: !Ref StarrySecret
    Export:
      Name: SecretArn
